pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time:10, unit:'MINUTES')
        disableConcurrentBuilds()
        //retry(1)
    }
    parameters{
        string(name: 'PERSON', defaultValue: 'Mr. Jenkins', description: 'Who should I say Hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    }
    environment {
        DEBUG = 'true'
    }

    stages {
        stage('Build') {
            steps {
                sh 'echo Building..'
            }
        }
        stage('Test'){
            steps {
               sh  'echo Testing..'
               sh 'env'
            }
        }
        stage('Deploy') {
            when {
                expression { env.GIT_BRANCH != 'origin/main'}
            }
            steps {
                sh 'echo Deploying....'
                //error 'pipeline failed'
            }
        }
        stage('PrintParams') {
            steps{
                echo "Hello ${params.PERSON}"
                echo "Biography: ${params.BIOGRAPHY}"
                echo "Toggle: ${params.TOGGLE}"
                echo "Choice: ${params.CHOICE}"
                echo "Password: ${params.PASSWORD}"
            }
        }
        stage('approval'){
            input {
                message "Should we continue?"
                ok "Yes, we should."
                submitter "alice,bob"
                parameters {
                    string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
                
                }
            }    
            steps {
                echo "Hello, ${PERSON}, nice to meet you."
            }
        }  
    }
    post{
        always{
            sh 'echo This runs always'
            deleteDir()
        }
        success{
            sh 'echo This runs when pipeline is success'
        }
        failure{
            sh 'echo This runs when pipeline fails'
        }
    }
}